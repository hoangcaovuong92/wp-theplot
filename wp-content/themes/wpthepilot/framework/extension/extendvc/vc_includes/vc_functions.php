<?php// **********************************************************************// // ! Override widget title// **********************************************************************// add_filter('wpb_widget_title', 'tvlgiao_wpdance_override_widget_title', 10, 2);function tvlgiao_wpdance_override_widget_title($output = '', $params = array('')) {  $extraclass = (isset($params['extraclass'])) ? " ".$params['extraclass'] : "";  return '<h4 class="entry-title'.$extraclass.'">'.$params['title'].'</h4>';}// **********************************************************************// // ! Taxonomy checkbox list field// **********************************************************************// function tvlgiao_wpdance_vc_taxonomy_form_field($settings, $value) {	//$dependency = vc_generate_dependencies_attributes($settings);	$terms_fields = array();	$terms_slugs = array();	$value_arr = $value;	if ( !is_array($value_arr) ) {		$value_arr = array_map( 'trim', explode(',', $value_arr) );	}	if ( !empty($settings['taxonomy']) ) {		$terms = get_terms( $settings['taxonomy'] );		if ( $terms && !is_wp_error($terms) ) {			foreach( $terms as $term ) {				$terms_slugs[] = $term->slug;				$terms_fields[] = sprintf(					'<option id="%s" class="%s" value="%s" %s>%s</option>',					$settings['param_name'] . '-' . $term->slug,					$settings['param_name'].' '.$settings['type'],					$term->slug,					selected( in_array( $term->slug, $value_arr ), true, false ),					$term->name				);			}		}	}	return 	'<select name="'.$settings['param_name'].'" class="wpb_vc_param_value wpb-input wpb-select dropdown">'			. '<option value="">--All--</option>'			. implode( $terms_fields ) 			. '</select>';}// Add new type into VCWpbakeryShortcodeParams::addField('wd_taxonomy', 'tvlgiao_wpdance_vc_taxonomy_form_field');function tvlgiao_wpdance_vc_taxonomy_cat_group($settings, $value, $tag) {	$dependency = vc_generate_dependencies_attributes($settings);	$res = '';	$terms_fields = array();	$terms_slugs = array();	$value_arr = $value;	if ( !is_array($value_arr) ) {		$value_arr = array_map( 'trim', explode(',', $value_arr) );	}	if ( !empty($settings['taxonomy']) ) {		$terms = get_terms( $settings['taxonomy'] );		if ( $terms && !is_wp_error($terms) ) {			foreach( $terms as $term ) {				$terms_slugs[] = $term->slug;				$terms_fields[] = sprintf(					'<option id="%s" class="%s" value="%s" %s>%s</option>',					$settings['param_name'] . '-' . $term->slug,					$settings['param_name'].' '.$settings['type'],					$term->slug,					selected( in_array( $term->slug, $value_arr ), true, false ),					$term->name				);			}		}	}		ob_start();		$param_value = wpb_removeNotExistingImgIDs( $value );	?>	<div class="wd_tax_cat_group">		<div class="wpb_el_type_attach_select_tmp" style="display: none;">			<select class="wd_tax_cat_group_select wpb_vc_param_value wpb-input wpb-select dropdown">				<option value=""><?php esc_html_e('-- Choose category --','wpnoone');?></option>				<?php echo implode( $terms_fields );?>			</select>		</div>		<div class="wd_tax_cat_group_control">			<div class="wpb_el_type_attach_image" style="width: 100%; overflow: hidden;">				<input type="hidden" class="wd_tax_cat_group_img_id wpb_vc_param_value gallery_widget_attached_images_ids" value="<?php echo esc_attr($value);?>"/>				<div class="gallery_widget_attached_images">					<ul class="gallery_widget_attached_images_list">						<?php echo ( $param_value != '' ) ? fieldAttachedImages( explode( ",", $value ) ) : '';?>					</ul>				</div>				<div class="gallery_widget_site_images"></div>				<a class="gallery_widget_add_images" href="#" title="<?php esc_attr_e( 'Add image', "wpnoone" )?>"><?php echo esc_html__( 'Add image', "wpnoone" )?></a>			</div>			<div class="wpb_el_type_attach_select"></div>			<div class="wpb_el_type_attach_text" style="margin-top: 10px;">				<textarea name="<?php echo esc_attr($settings['param_name']);?>" class="wd_tax_cat_group_value wpb_vc_param_value wpb-textinput title textfield" placeholder="<?php echo esc_attr('Enter cat slug list, divide values with comma (,)');?>" rows="5"><?php echo esc_attr($value);?></textarea>			</div>		</div>	</div>	<script type="text/javascript">		jQuery(document).ready(function(){			var select_ = jQuery('.wd_tax_cat_group .wpb_el_type_attach_select_tmp select').html();			jQuery('body').on('change', '.wd_tax_cat_group .wd_tax_cat_group_img_id', function(){				var img_str = jQuery(this).val();				var img_args = img_str.split(",");				img_str = img_str.replace(/,/g, '|\n')+ '|';				var this_ = jQuery(this);				this_.parents('.wd_tax_cat_group_control').find('.wpb_el_type_attach_select').html('');				console.log(img_args);				jQuery.each(img_args, function(i,val){					if(val.length > 0)					this_.parents('.wd_tax_cat_group_control').find('.wpb_el_type_attach_select').append('\					<select class="wd_tax_cat_group_select wpb_vc_param_value wpb-input wpb-select dropdown" data-img_id="'+val+'">\						'+select_+'\					</select>\					');				});				jQuery(this).parents('.wd_tax_cat_group').find('.wd_tax_cat_group_value').val(img_str);			});						jQuery('body').on('change', '.wd_tax_cat_group .wd_tax_cat_group_select', function(){							});					});	</script>	<?php 	$res = ob_get_clean();		return $res;}WpbakeryShortcodeParams::addField('wd_tax_cat_group', 'tvlgiao_wpdance_vc_taxonomy_cat_group');function tvlgiao_wpdance_wd_register_custom_vc_scripts() {	// register custom pie jquery plugin	wp_register_script('vc_wd_pie', TVLGiao_Wpdance_THEME_EXTENDS_EXTENDVC_URI . '/vc_extend/jquery.vc_chart.js', array('jquery', 'waypoints', 'progressCircle'));}add_action('wp_enqueue_scripts', 'tvlgiao_wpdance_wd_register_custom_vc_scripts', 15);if (!function_exists('tvlgiao_wpdance_getAnimationtype')){	function tvlgiao_wpdance_getAnimationtype(){		$animation_types = array(			"bounce"=>"bounce",			"flash"=>"flash",			"pulse"=>"pulse",			"rubberBand"=>"rubberBand",			"shake"=>"shake",			"swing"=>"swing",			"tada"=>"tada",			"wobble"=>"wobble",			"bounceIn"=>"bounceIn",			"bounceInDown"=>"bounceInDown",			"bounceInLeft"=>"bounceInLeft",			"bounceInRight"=>"bounceInRight",			"bounceInUp"=>"bounceInUp",			"bounceOut"=>"bounceOut",			"bounceOutDown"=>"bounceOutDown",			"bounceOutLeft"=>"bounceOutLeft",			"bounceOutRight"=>"bounceOutRight",			"bounceOutUp"=>"bounceOutUp",			"fadeIn"=>"fadeIn",			"fadeInDown"=>"fadeInDown",			"fadeInDownBig"=>"fadeInDownBig",			"fadeInLeft"=>"fadeInLeft",			"fadeInLeftBig"=>"fadeInLeftBig",			"fadeInRight"=>"fadeInRight",			"fadeInRightBig"=>"fadeInRightBig",			"fadeInUp"=>"fadeInUp",			"fadeInUpBig"=>"fadeInUpBig",			"fadeOut"=>"fadeOut",			"fadeOutDown"=>"fadeOutDown",			"fadeOutDownBig"=>"fadeOutDownBig",			"fadeOutLeft"=>"fadeOutLeft",			"fadeOutLeftBig"=>"fadeOutLeftBig",			"fadeOutRight"=>"fadeOutRight",			"fadeOutRightBig"=>"fadeOutRightBig",			"fadeOutUp"=>"fadeOutUp",			"fadeOutUpBig"=>"fadeOutUpBig",			"flip"=>"flip",			"flipInX"=>"flipInX",			"flipInY"=>"flipInY",			"flipOutX"=>"flipOutX",			"flipOutY"=>"flipOutY",			"lightSpeedIn"=>"lightSpeedIn",			"lightSpeedOut"=>"lightSpeedOut",			"rotateIn"=>"rotateIn",			"rotateInDownLeft"=>"rotateInDownLeft",			"rotateInDownRight"=>"rotateInDownRight",			"rotateInUpLeft"=>"rotateInUpLeft",			"rotateInUpRight"=>"rotateInUpRight",			"rotateOut"=>"rotateOut",			"rotateOutDownLeft"=>"rotateOutDownLeft",			"rotateOutDownRight"=>"rotateOutDownRight",			"rotateOutUpLeft"=>"rotateOutUpLeft",			"rotateOutUpRight"=>"rotateOutUpRight",			"slideInDown"=>"slideInDown",			"slideInLeft"=>"slideInLeft",			"slideInRight"=>"slideInRight",			"slideOutLeft"=>"slideOutLeft",			"slideOutRight"=>"slideOutRight",			"slideOutUp"=>"slideOutUp",			"hinge"=>"hinge",			"rollIn"=>"rollIn",			"rollOut"=>"rollOut",		);				return $animation_types;	}}global $wd_effect_arg;$wd_effect_arg = tvlgiao_wpdance_getAnimationtype();?>